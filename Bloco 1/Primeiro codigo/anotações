class Program{
    static void Main(){

    // var logger = new FileLogger("mylog.txt");
    // var account1 = new BankAccount("Gustavo", 100, logger);
    // var account2 = new BankAccount("Older", 1000, logger);

    // var accounts = new List<BankAccount>()
    // {
    //     account1,
    //     account2
    // };

    // var store = new DataStore<int>(); //tipagem implicita, o compilador define o tipo da variavel de acordo com a expressao da direita
    // // ou 
    // //DataStore<int> store = new DataStore<int>(); 

    // Console.WriteLine(store.Value);


    // foreach (BankAccount account in accounts)
    // {
    //     Console.WriteLine($"Saldo: {account.Balance}");
    // }

    //         Console.Write("Digite seu nome: ");
    // string name =  Console.ReadLine();

    // Console.WriteLine($"Olá {name}!");
    // Console.Write("Digite o ano que nasceu: ");
    // int year = int.Parse(Console.ReadLine());
    // int age = 2022 - year;
    // Console.WriteLine($"Você tem {age} anos");

    // if(age >= 18 || name == "Gabriel") {
    //     Console.WriteLine("Você é maior de idade");
    //     }
    // else {
    //     Console.WriteLine("Você é menor de idade");
    // }

    // string[] names = {"Gustavo", "Paulo", "João"};
    // if (string.Equals(names[0] == "Gustavo", StringComparison.OrdinalIgnoreCase)){
    //     Console.WriteLine("SEXO");
    // }

    // for (int i = 0; i < names.Length; i++){
    //     Console.WriteLine(names[i]);
    // }
    // foreach (string name in names){
    //     Console.WriteLine(name);
    // }

    // int i = 10;

    // if (int.TryParse("42", out int x)){
    //     Console.WriteLine("Sucesso");
    // }
    // else{
    //     Console.WriteLine("Erro");
    // }
    // Console.WriteLine(x);
    //     }

    // int b = 10;
    // long l = 10;
    // l = b;
    // b = (int)l;

    // string s = l.ToString();

    // Console.WriteLine(s);

    // Console.Write("Digite um numero: ");
    //     int z = int.Parse(Console.ReadLine());
    //     string[] x = {};    
    //     for (int i = 0; i < z; i++)
    //     {
    //         for (int j = 0; j < z ; j++)
    //         {
    //             Console.Write(" #");
    //         }
    //         Console.WriteLine();
    //     }

    }
}

class Aiai{
    static void Sexozinho(){
    //     Console.Write("Digite um dia da semana(sendo 1:Domingo, 2:Segunda,...): ");
    //     int a = int.Parse(Console.ReadLine());

    //     switch (a){
    //         case 1:
    //             Console.WriteLine("Domingo");
    //             break;
    //         case 2:
    //             Console.WriteLine("Segunda");
    //             break;
    //         case 3:
    //             Console.WriteLine("Terça");
    //             break;
    //         case 4:
    //             Console.WriteLine("Quarta");
    //             break;
    //         case 5:
    //             Console.WriteLine("Quinta");
    //             break;
    //         case 6:
    //             Console.WriteLine("Sexta");
    //             break;
    //         case 7:
    //             Console.WriteLine("Sabado");
    //             break;
    //     }

    //     Console.Write("Digite um numero: ");
    //     int z = int.Parse(Console.ReadLine());
    //     string[] x = {};    
    //     for (int i = 0; i < z; i++)
    //     {
    //         Console.Write("#");
    //         for (int j = 0; j < z ; j++)
    //         {
    //             Console.Write("#");
    //         }
    //     }
     }
}

// class Program{
//     static void Main(){
//         Console.WriteLine($"Soma e multiplicação: ");
//         Run(Sum);
//         var multiply = (int x ,int y) => x * y;
//         // o => retornma uma expressao lambda podendo ate mesmo remover o return
//         Run(multiply);

//         var test =  (string name) => Console.WriteLine($"Olá {name}");
//         test("John Wick"); //action n retorna nada sempre sera VOID, mas pode receber ate 16 parametros

//         Func<decimal> test2 = () => 4.2m; // func sempre retorna algo mas pode ate msm n receber nada, 
//         //da para remover os parenteses  ^^

//         Console.WriteLine(test2());

//         Func<string, bool> CheckName = name => name == "Gustavo";//na lambda se tiver so 1 parametro pode-se emitir os parenteses

//         Console.WriteLine(CheckName("Maria"));
//     }

//     static void Run(Func<int, int, int> calc)
//     {
//         Console.WriteLine(calc(20,30));
//     }

//     static int Sum(int a, int b)
//     {
//         return a + b;
//     }
// }

// static class Extensions
// {
//     public static void Texto(string text, ConsoleColor color)
//     {
//         Console.ForegroundColor = color;
//         Console.WriteLine(text);
//         Console.ResetColor();
//     }

//     public static void testLogger(this ILogger logger)
//     {

//     }
// }

// class Program{
//     static void Main()
//     {
//         Extensions.Texto("Gustavo", ConsoleColor.DarkYellow);
//         // Bank.BankAccount account = new Bank.BankAccount("Gustavo", 100, new Bank.ConsoleLogger());
//         // usa deste modo de vc n colocou no começo do codigo o using Bank; ou outro namespace que voce esta usando
//         BankAccount account = new ("Gustavo", 100, new Bank.ConsoleLogger());
//         // agora que coloquei o using Bank eu posso omitir esses Bank.
//         string json = JsonSerializer.Serialize(account);
//         Console.WriteLine(json);

//         BankAccount account1 = JsonSerializer.Deserialize<BankAccount>(json);

//         Console.WriteLine(account1.Name);
//     }
// }

// class Program{
//     static void Main()
//     {
//         int[] numbers = {1, 4, 10, 42};

//         var query = from number in numbers
//                     where number < 10
//                     select number;
        
//         // ^^sem utilizar extensao e uma expressao lambda
//         var query2 = numbers.Where(number => number < 10);
//         //utilizando extensao e expressao lambda
//         Console.WriteLine($"Quantidade de numeros < 10 = {query.Count()}");

//         var results = query.ToList();

//         foreach (var number in results)
//         {
//             Console.WriteLine(results);
//         }
//         //Extensions.Texto("Gustavo", (ConsoleColor.Blue));
//     }
// }

// class Program{
//     static void Main()
//     {
//         int[] numbers = {1, 4, 10, 42};

//         //var query = numbers.Where(number => number > 8);
//         var query = numbers.OrderByDescending(number => number);

//         var accounts = new List<BankAccount>
//         {
//             new BankAccount("Gustavo", 100) 
//             { 
//                 Branch = "123"
//             },
//             new BankAccount("Juliana", 50){Branch = "321"},
//             new BankAccount("Antonio", 150){Branch = "321"},
//         };

//         var acc = accounts.GroupBy(account => account.Branch);

//         foreach (var group in acc)
//             {
//                 Console.WriteLine($"Agencia: {group.Key}");
//                 Console.WriteLine("---");
//                 foreach (var account in group)
//                 {
//                     Console.WriteLine($"{account.Name} possui ${account.Balance}");
//                 }
//                 Console.WriteLine("---");
//             }
//         // var namesQuery = accounts.Select(account => $"{account.Name} ${account.Balance}");
//         var namesQuery = accounts.Select(account => new {account.Name,account.Branch});

//         var test = Enumerable.Empty<int>();

//         // var random = new Random();
//         // var range = Enumerable.Range(0, 5).Select(number => random.Next(1, 100));
//         var range = Enumerable.Range(0, 27).Select(number => (char)('a' + number));
//     }
// }